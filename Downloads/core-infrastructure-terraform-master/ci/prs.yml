jobs:
- name: test
  public: true
  plan:
  - get: "git_repo_core-infrastructure-terraform"
    trigger: true
    version: every
  - get: "terraform_prs_docker_image"
  - task: "test"
    image: "terraform_prs_docker_image"
    config:
      platform: linux
      inputs:
      - name: "git_repo_core-infrastructure-terraform"
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        TF_VAR_pagerduty_tf_token_ci_test: ((pagerduty_tf_token_ci_test))
      run:
        dir: git_repo_core-infrastructure-terraform
        path: sh
        args:
          - "-ec"
          - |
            ./scripts/ci_setup.sh
            apk add make bash
            make test
    on_success:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: success
        context: "test modules"
    on_failure:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: failure
        context: "test modules"
- name: plan_product_management
  serial: true
  public: true
  plan:
  - get: "git_repo_core-infrastructure-terraform"
    trigger: true
  - get: "terraform_docker_image"
  - aggregate:
    - task: "plan_product_enactor"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: enactor_management
    - task: "plan_product_rfid"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: rfid_management
    - task: "plan_product_order"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: order_management
    - task: "plan_product_product"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: product_management
    - task: "plan_product_payment"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: payment_management
        TF_VAR_pagerduty_tf_token_ci_test: ((pagerduty_tf_token_ci_test))
    on_success:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: success
        context: "plan product management"
    on_failure:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: failure
        context: "plan product management"
- name: plan_product_dev
  serial: true
  public: true
  plan:
  - get: "git_repo_core-infrastructure-terraform"
    trigger: true
  - get: "terraform_docker_image"
  - aggregate:
    - task: "plan_product_enactor"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: enactor_dev
    - task: "plan_product_rfid"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: rfid_dev
    - task: "plan_product_order"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: order_dev
    - task: "plan_product_product"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: product_dev
    - task: "plan_product_payment"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: payment_dev
        TF_VAR_pagerduty_tf_token_ci: ((pagerduty_tf_token_ci))
    - task: "plan_shared"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: shared_dev
    on_success:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: success
        context: "plan product dev"
    on_failure:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: failure
        context: "plan product dev"
- name: plan_product_sit
  serial: true
  public: true
  plan:
  - get: "git_repo_core-infrastructure-terraform"
    trigger: true
  - get: "terraform_docker_image"
  - aggregate:
    - task: "plan_product_enactor"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: enactor_sit
    on_success:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: success
        context: "plan product sit"
    on_failure:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: failure
        context: "plan product sit"
- name: plan_product_staging
  serial: true
  public: true
  plan:
  - get: "git_repo_core-infrastructure-terraform"
    trigger: true
  - get: "terraform_docker_image"
  - aggregate:
    - task: "plan_product_enactor"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: enactor_staging
    - task: "plan_product_rfid"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: rfid_staging
    - task: "plan_product_order"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: order_staging
    - task: "plan_product_product"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: product_staging
    - task: "plan_product_payment"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: payment_staging
        TF_VAR_pagerduty_tf_token_ci_test: ((pagerduty_tf_token_ci_test))
    on_success:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: success
        context: "plan product staging"
    on_failure:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: failure
        context: "plan product staging"
- name: plan_product_prod
  serial: true
  public: true
  plan:
  - get: "git_repo_core-infrastructure-terraform"
    trigger: true
  - get: "terraform_docker_image"
  - aggregate:
    - task: "plan_product_enactor"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: enactor_prod
    - task: "plan_product_rfid"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: rfid_prod
    - task: "plan_product_order"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: order_prod
    - task: "plan_product_product"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: product_prod
    - task: "plan_product_payment"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: payment_prod
        TF_VAR_pagerduty_tf_token_ci_test: ((pagerduty_tf_token_ci_test))
    - task: "plan_shared"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: shared_prod
    on_success:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: success
        context: "plan product prod"
    on_failure:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: failure
        context: "plan product prod"
- name: plan_non_product
  serial: true
  public: true
  plan:
  - get: "git_repo_core-infrastructure-terraform"
    trigger: true
  - get: "terraform_docker_image"
  - aggregate:
    - task: "plan_test"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: test
    - task: "plan_root"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: root
    - task: "plan_pocs"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: pocs
    - task: "plan_management"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: management
    - task: "plan_iam"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: iam
    - task: "plan_monitoring"
      image: "terraform_docker_image"
      file: git_repo_core-infrastructure-terraform/ci/task_config.yml
      params:
        GITHUB_PRIVATE_KEY: ((github_private_key))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        RI_PROVIDER_DIR: monitoring
    on_success:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: success
        context: "plan non product"
    on_failure:
      put: "git_repo_core-infrastructure-terraform"
      params:
        path: "git_repo_core-infrastructure-terraform"
        status: failure
        context: "plan non product"
resources:
- name: "terraform_prs_docker_image"
  type: docker-image
  source:
    repository: "hashicorp/terraform"
    tag: "0.11.0"
- name: "terraform_docker_image"
  type: docker-image
  source:
    repository: "hashicorp/terraform"
    tag: "0.10.8"
- name: "git_repo_core-infrastructure-terraform"
  type: pull-request
  source:
    access_token: ((github_access_key))
    private_key: ((github_private_key))
    repo: "River-Island/core-infrastructure-terraform"
    uri: "git@github.com:River-Island/core-infrastructure-terraform.git"
    every: true

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr
